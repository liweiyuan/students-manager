# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test
      
      - name: Install k6
        run: |
          sudo apt update
          sudo apt install -y gnupg software-properties-common
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" |  sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt update
          sudo apt install -y k6

      - name: Start Dart server
        run: |
          nohup dart run bin/main.dart > server.log 2>&1 &
          echo $! > server.pid
          echo "Waiting for server to start..."
          # 等待服务器启动并检查是否正常运行
          for i in {1..30}; do
            if curl -s http://localhost:8080/students > /dev/null; then
              echo "Server is up and running!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start!"
              cat server.log
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 1
          done

      - name: Run k6 performance test
        run: |
          k6 run stressTest.js
        
      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid)
            rm server.pid
          fi
          cat server.log
